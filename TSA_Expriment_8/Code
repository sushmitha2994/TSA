!pip install pmdarima
import pandas as pd

df = pd.read_csv('/content/daily-total-female-births-CA.csv')  # Try tab separator
print(df.head())  # Display first few rows to check structure
import pandas as pd
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("/content/daily-total-female-births-CA.csv", parse_dates=["date"], index_col="date")

# Display first few rows
print(df.head())

# Plot the time series
plt.figure(figsize=(12, 6))
plt.plot(df["births"], label="Daily Female Births", color="blue")
plt.xlabel("date")
plt.ylabel("Number of Births")
plt.title("Daily Female Births in California (1959)")
plt.legend()
plt.show()
from statsmodels.tsa.stattools import adfuller

# Perform ADF Testfrom statsmodels.tsa.arima.model import ARIMA

# Fit ARIMA model
model = ARIMA(train["births"], order=(2,1,2))  # (p=2, d=1, q=2)
model_fit = model.fit()

# Print model summary
print(model_fit.summary())
adf_test = adfuller(df["births"])
print(f"ADF Statistic: {adf_test[0]}")
print(f"P-Value: {adf_test[1]}")
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Compute errors
mae = mean_absolute_error(test["births"], forecast)
mse = mean_squared_error(test["births"], forecast)
rmse = mse ** 0.5
mape = (abs(test["births"] - forecast) / test["births"]).mean() * 100

# Print evaluation results
print(f" Mean Absolute Error (MAE): {mae:.2f}")
print(f" Mean Squared Error (MSE): {mse:.2f}")
print(f" Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f" Mean Absolute Percentage Error (MAPE): {mape:.2f}%")

if adf_test[1] < 0.05:
    print(" Data is Stationary")
else:
    print(" Data is Non-Stationary, Differencing Required")
train_size = int(len(df) * 0.8)
train, test = df[:train_size], df[train_size:]
